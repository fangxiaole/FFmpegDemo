plugins {
    id 'com.android.library'
}

android {
    compileSdkVersion 31
    buildToolsVersion "31.0.0"

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
        externalNativeBuild {
            cmake {
                cppFlags "-std=c++14 -frtti -fexceptions"
                arguments '-DANDROID_TOOLCHAIN=clang'
                arguments '-DANDROID_STL=c++_static'
            }
        }

        ndk {
            abiFilters "armeabi-v7a"
        }

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }

}

dependencies {

    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'com.google.android.material:material:1.1.0'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}

//********************************************
//      本地编译发布
//********************************************

//def sdkDestinationPath = "build"
//def zipFile = file('build\\intermediates\\aar_main_jar\\debug\\classes.jar')
//
//task makeJar(type: Jar) {
//    from zipTree(zipFile)
//    from fileTree(dir: 'src/main',includes: ['assets/**'])//将assets目录打入jar包
//    destinationDir = file(sdkDestinationPath)
//}
//
//makeJar.dependsOn(deleteBuild, build)

task makeJar(type: Copy) {
    //删除存在的
    delete 'build/libs/myjar.jar'
    //设置拷贝的文件
    from('D:\\work\\code\\FFmpegCmdDemo\\ffmpeglibrary\\build\\intermediates\\aar_main_jar\\debug\\classes.jar')
    //打进jar包后的文件目录
    into('build/libs/')
    //将classes.jar放入build/libs/目录下
    //include ,exclude参数来设置过滤
    //（我们只关心classes.jar这个文件）
    include('classes.jar')
    //重命名
    rename ('classes.jar', 'JimiFFmpegCmd-1.0.1.jar')
}

makeJar.dependsOn(build)
